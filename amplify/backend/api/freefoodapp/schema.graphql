type Comment {
	id: String!
	eventId: String!
	userId: String!
	text: String!
	date: AWSTimestamp!
	upvote: Int
	downvote: Int
}

type CommentConnection {
	items: [Comment]
	nextToken: String
}

input CreateCommentInput {
	eventId: String!
	userId: String!
	text: String!
	date: AWSTimestamp!
	upvote: Int
	downvote: Int
}

input CreateEventInput {
	eventId: String!
	posterId: String!
	longitude: Float!
	latitude: Float!
	startTime: AWSTimestamp!
	endTime: AWSTimestamp!
	description: String
	upvote: Int
	downvote: Int
}

input DeleteCommentInput {
	id: String!
}

input DeleteEventInput {
	eventId: String!
}

type Event {
	eventId: String!
	posterId: String!
	longitude: Float!
	latitude: Float!
	startTime: AWSTimestamp!
	endTime: AWSTimestamp!
	description: String
	upvote: Int
	downvote: Int
}

type EventConnection {
	items: [Event]
	nextToken: String
}

type Mutation {
	createComment(input: CreateCommentInput!): Comment
	updateComment(input: UpdateCommentInput!): Comment
	deleteComment(input: DeleteCommentInput!): Comment
	createEvent(input: CreateEventInput!): Event
	updateEvent(input: UpdateEventInput!): Event
	deleteEvent(input: DeleteEventInput!): Event
}

type Query {
	getComment(id: String!): Comment
	listComments(filter: TableCommentFilterInput, limit: Int, nextToken: String): CommentConnection
	getEvent(eventId: String!): Event
	listEvents(filter: TableEventFilterInput, limit: Int, nextToken: String): EventConnection
}

type Subscription {
	onCreateComment(
		id: String,
		eventId: String!,
		userId: String,
		text: String,
		date: AWSTimestamp
	): Comment
		@aws_subscribe(mutations: ["createComment"])
	onUpdateComment(
		id: String,
		upvote: Int,
		downvote: Int
	): Comment
		@aws_subscribe(mutations: ["updateComment"])
	onDeleteComment(
		id: String,
		eventId: String!,
		userId: String,
		text: String,
		date: AWSTimestamp
	): Comment
		@aws_subscribe(mutations: ["deleteComment"])
	onCreateEvent(
		eventId: String,
		posterId: String,
		longitude: Float,
		latitude: Float,
		startTime: AWSTimestamp
	): Event
		@aws_subscribe(mutations: ["createEvent"])
	onUpdateEvent(
		eventId: String,
		posterId: String,
		longitude: Float,
		latitude: Float,
		startTime: AWSTimestamp
	): Event
		@aws_subscribe(mutations: ["updateEvent"])
	onDeleteEvent(
		eventId: String,
		posterId: String,
		longitude: Float,
		latitude: Float,
		startTime: AWSTimestamp
	): Event
		@aws_subscribe(mutations: ["deleteEvent"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableCommentFilterInput {
	id: TableStringFilterInput
	eventId: TableStringFilterInput
	userId: TableStringFilterInput
	text: TableStringFilterInput
	date: TableStringFilterInput
	upvote: TableIntFilterInput
	downvote: TableIntFilterInput
}

input TableEventFilterInput {
	eventId: TableStringFilterInput
	posterId: TableStringFilterInput
	longitude: TableFloatFilterInput
	latitude: TableFloatFilterInput
	startTime: TableIntFilterInput
	endTime: TableIntFilterInput
	description: TableStringFilterInput
	upvote: TableIntFilterInput
	downvote: TableIntFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateCommentInput {
	id: String!
	upvote: Int
	downvote: Int
}

input UpdateEventInput {
	eventId: String!
	posterId: String
	longitude: Float
	latitude: Float
	startTime: AWSTimestamp
	endTime: AWSTimestamp
	description: String
	upvote: Int
	downvote: Int
}